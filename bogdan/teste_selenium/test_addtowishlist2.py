# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestAddtowishlist2():
    def setup_method(self, method):
        self.driver = webdriver.Firefox()
        self.vars = {}
        self.product_detail_url = None

    def teardown_method(self, method):
        if self.product_detail_url is not None:
            self.driver.get(self.product_detail_url)
            self.driver.find_element(By.CSS_SELECTOR, ".wishlist-button-add > .material-icons").click()
        self.driver.quit()


    def test_addtowishlist2(self):
        # Test name: add_to_wishlist2
        # Step # | name | target | value
        # 1 | open | https://prestashop-ta26.multibit.ro/en/ |
        self.driver.get("https://prestashop-ta26.multibit.ro/en/")
        # 2 | setWindowSize | 1168x637 |
        self.driver.set_window_size(1168, 637)
        # 3 | click | css=a > .hidden-sm-down |
        self.driver.find_element(By.CSS_SELECTOR, "a > .hidden-sm-down").click()
        # 4 | click | id=field-email |
        self.driver.find_element(By.ID, "field-email").click()
        # 5 | type | id=field-password | paroladetest
        self.driver.find_element(By.ID, "field-password").send_keys("paroladetest")
        # 6 | type | id=field-email | lucaciubogdansorin@gmail.com
        self.driver.find_element(By.ID, "field-email").send_keys("lucaciubogdansorin@gmail.com")
        # 7 | click | id=submit-login |
        self.driver.find_element(By.ID, "submit-login").click()
        # 8 | click | css=#category-3 > .dropdown-item |
        self.driver.find_element(By.CSS_SELECTOR, "#category-3 > .dropdown-item").click()
        # 9 | click | css=.js-product:nth-child(2) img |
        self.driver.find_element(By.CSS_SELECTOR, ".js-product:nth-child(2) img").click()
        product_name = self.driver.find_element(By.TAG_NAME, "h1").get_attribute("innerText")
        # 10 | click | css=.wishlist-button-add > .material-icons |
        self.driver.find_element(By.CSS_SELECTOR, ".wishlist-button-add > .material-icons").click()
        self.product_detail_url = self.driver.current_url
        # 11 | click | css=.wishlist-list-item > p |
        wishlist_item = WebDriverWait(self.driver, 30).until(
            lambda d: d.find_element(By.CSS_SELECTOR, ".wishlist-list-item > p"))
        wishlist_item.click()
        # 12 | click | css=.account > .hidden-sm-down |
        self.driver.find_element(By.CSS_SELECTOR, ".account > .hidden-sm-down").click()
        # 13 | click | css=#wishlist-link .material-icons |
        self.driver.find_element(By.CSS_SELECTOR, "#wishlist-link .material-icons").click()
        # 14 | click | css=.wishlist-list-item-title |
        product = WebDriverWait(self.driver, 15).until(
            lambda driver: driver.find_element(By.CSS_SELECTOR, ".wishlist-list-item-title"))
        product.click()
        # 15 | click | css=.wishlist-products-list |
        # product = WebDriverWait(self.driver, 15).until(
        #     lambda driver: driver.find_element(By.CSS_SELECTOR, ".wishlist-products-list"))
        # product.click()
        self.driver.implicitly_wait(5)
        wishlist_products = self.driver.find_element(By.CLASS_NAME, "wishlist-products-list")
        wishlist_titles = wishlist_products.find_elements(By.CLASS_NAME, "wishlist-product-title")
        titles = [t.get_attribute("innerText").lower() for t in wishlist_titles]
        assert product_name.lower() in titles
